basePath: /api/v1
definitions:
  model.Block:
    properties:
      default:
        example: 2
        type: integer
      options:
        items:
          $ref: '#/definitions/model.Option'
        type: array
      state:
        example: 1
        type: integer
      text:
        example: Введите своё ФИО, например, Иванов Иван Иванович
        type: string
      title:
        example: ФИО участника
        type: string
      type:
        allOf:
        - $ref: '#/definitions/model.BlockType'
        example: question
    type: object
  model.BlockType:
    enum:
    - message
    - question
    - selection
    type: string
    x-enum-varnames:
    - Message
    - Question
    - Selection
  model.Option:
    properties:
      next:
        example: 1
        type: integer
      text:
        example: Опция 1
        type: string
    type: object
  request.Create:
    properties:
      blocks:
        items:
          $ref: '#/definitions/model.Block'
        type: array
      name:
        example: Регистрация на мероприятие
        type: string
      start:
        example: 1
        type: integer
      token:
        example: XXXXXXXXXX:YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
        type: string
    type: object
  request.Login:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: s3cr3tpw
        type: string
    type: object
  request.Register:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: s3cr3tpw
        type: string
    type: object
  response.Authorized:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDIsIm1lc3NhZ2UiOiJJJ20gdGVhcG90In0.S04gkQab6031E4HABjPBBBTt0K5eR1XLn_R4_VI3M3s
        type: string
    type: object
  response.Bot:
    properties:
      blocks:
        items:
          $ref: '#/definitions/model.Block'
        type: array
      id:
        example: 1
        type: integer
      name:
        example: Регистрация на мероприятие
        type: string
      start:
        example: 1
        type: integer
      token:
        example: XXXXXXXXXX:YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
        type: string
    type: object
  response.Create:
    properties:
      bot_id:
        example: 1
        type: integer
    type: object
  response.Empty:
    type: object
  response.Error:
    properties:
      message:
        example: error message
        type: string
    type: object
info:
  contact:
    email: zhikh.k@gmail.com
    name: Zhikharev Kirill
    url: https://t.me/zhikhkirill
  title: ITS Reg API
  version: 0.1.2
paths:
  /bots/{id}:
    get:
      consumes:
      - application/json
      operationId: bot-get
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Bot'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Get bot model
  /bots/{id}/start:
    post:
      consumes:
      - application/json
      operationId: bot-start
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Start telegram bot
  /bots/{id}/stop:
    post:
      consumes:
      - application/json
      operationId: bot-stop
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/response.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Stop telegram bot
  /bots/create:
    post:
      consumes:
      - application/json
      operationId: bot-create
      parameters:
      - description: Bot data
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/request.Create'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Create'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - BearerAuth: []
      summary: Create a bot
  /login:
    post:
      consumes:
      - application/json
      operationId: auth-login
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Authorized'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Error'
      summary: Authenticate a user
  /register:
    post:
      consumes:
      - application/json
      operationId: auth-register
      parameters:
      - description: User's credentials
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/request.Register'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Authorized'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.Error'
      summary: Register a user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
